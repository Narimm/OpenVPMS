package org.openvpms.web.workspace.patient.insurance.claim;

import org.openvpms.archetype.rules.util.DateRules;
import org.openvpms.component.model.party.Party;
import org.openvpms.insurance.service.Times;
import org.openvpms.web.resource.i18n.Messages;

import java.time.OffsetDateTime;
import java.util.Date;

/**
 * Determines if gap claims may be submitted.
 *
 * @author Tim Anderson
 */
public class GapClaimSubmitStatus {

    /**
     * The message generated by {@link #check}.
     */
    private String message;

    /**
     * Determines if gap claims may be submitted.
     * <br/>
     * On completion, the {@link #getMessage()} method returns any user message indicating why submission isn't
     * supported, or any restrictions on submission.
     *
     * @param insurer  the insurer
     * @param times    the times when claims may next be submitted. May be {@code null}
     * @param gapClaim determines if the current claim is a gap claim
     * @return {@code true} if gap claims may be submitted now, otherwise {@code false}
     */
    public boolean check(Party insurer, Times times, boolean gapClaim) {
        boolean result = false;
        message = null;
        if (times != null) {
            // insurer supports gap claims
            if (times.inRange(OffsetDateTime.now())) {
                if (times.getTo() != null) {
                    // warn the user when gap claims can be submitted up to
                    message = Messages.format("patient.insurance.gap.submitto", insurer.getName(),
                                              DateRules.toDate(times.getTo()));
                }
                result = true;
            } else {
                OffsetDateTime from = times.getFrom();
                if (from != null) {
                    Date date = DateRules.toDate(from);
                    if (DateRules.isToday(from)) {
                        message = Messages.format("patient.insurance.gap.submitat", insurer.getName(), date);
                    } else if (DateRules.isTomorrow(from)) {
                        message = Messages.format("patient.insurance.gap.submittomorrow", insurer.getName(), date);
                    } else {
                        message = Messages.format("patient.insurance.gap.submiton", insurer.getName(), date);
                    }
                } else {
                    // don't have a time when gap claims may be submitted
                    message = Messages.format("patient.insurance.gap.notsupported", insurer.getName());
                }
            }
        } else if (gapClaim) {
            // insurer doesn't support gap claims, but the current claim is a gap claim
            message = Messages.format("patient.insurance.gap.notsupported", insurer.getName());
        }
        return result;
    }

    /**
     * Returns any message generated by {@link #check}.
     *
     * @return the message. May be {@code null}
     */
    public String getMessage() {
        return message;
    }
}
