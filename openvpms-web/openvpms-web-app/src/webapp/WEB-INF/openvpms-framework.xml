<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2019 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:plugin="http://openvpms.org/schema/plugin/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                           http://openvpms.org/schema/plugin/spring
                           http://openvpms.org/schema/plugin/spring/plugin.xsd">

    <!-- ================================================================== -->
    <!--                         GENERAL DEFINITIONS                        -->
    <!-- ================================================================== -->

    <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">

        <property name="ignoreResourceNotFound" value="true"/>

        <!-- Note: Properties defined in later files will override          -->
        <!-- properties defined earlier files, in case of overlapping keys. -->
        <!-- Hence, make sure that the most specific files are the last     -->
        <!-- ones in the given list of locations.                           -->
        <property name="locations">
            <list>
                <value>classpath:default-openvpms.properties</value>
                <value>classpath:hibernate.properties</value>
                <value>classpath:smartflow.properties</value>
            </list>
        </property>
    </bean>

    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="properties"/>

        <!-- allow system properties to override any other property source -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!-- ================================================================== -->
    <!--                         RESOURCE DEFINITIONS                       -->
    <!-- ================================================================== -->

    <!--  The DataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="databaseService" class="org.openvpms.db.service.impl.DatabaseServiceImpl">
        <constructor-arg value="${jdbc.driverClassName}"/>
        <constructor-arg value="${jdbc.url}"/>
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="databaseVersionChecker" class="org.openvpms.db.service.DatabaseVersionChecker">
        <constructor-arg ref="databaseService"/>
    </bean>

    <!--  Hibernate session factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
          depends-on="databaseVersionChecker">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.openvpms.component.business.dao.hibernate.cache.WorkaroundJCacheRegionFactory</prop>
                <prop key="hibernate.criteria.literal_handling_mode">BIND</prop>
                <prop key="hibernate.javax.cache.provider">org.ehcache.jsr107.EhcacheCachingProvider</prop>
                <prop key="hibernate.javax.cache.uri">ehcache-web.xml</prop>
                <prop key="hibernate.query.factory_class">org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory</prop>
                <prop key="hibernate.show_sql">false</prop>
            </props>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:org/openvpms/component/business/dao/**/*.hbm.xml</value>
                <value>classpath:org/openvpms/archetype/rules/**/*.hbm.xml</value>
                <value>classpath:org/openvpms/web/jobs/**/*.hbm.xml</value>
            </list>
        </property>
    </bean>
    <!--  Transaction manager -->
    <bean id="txnManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <aop:config proxy-target-class="true"/>
    <tx:annotation-driven transaction-manager="txnManager"/>

    <!-- ================================================================== -->
    <!--                           DAO DEFINITIONS                        = -->
    <!-- ================================================================== -->


    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <constructor-arg ref="sessionFactory"/>
    </bean>

    <!--  The AuditRecord DAO bean -->
    <!--bean id="auditDao"
          class="org.openvpms.component.business.dao.hibernate.im.audit.AuditDAOHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean-->

    <!-- ================================================================== -->
    <!--                      BUSINESS SERVICE BEANS                        -->
    <!-- ================================================================== -->

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg ref="imObjectDao"/>
    </bean>

    <!--  The Archetype Rule service -->
    <bean id="archetypeRuleService"
          class="org.openvpms.component.business.service.archetype.rule.ArchetypeRuleService">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="ruleEngine"/>
        <constructor-arg ref="txnManager"/>
        <property name="facts">
            <!-- make currencies available to rules -->
            <list>
                <ref bean="currencies"/>
                <ref bean="lookupService"/>
                <ref bean="customerBalanceUpdater"/>
            </list>
        </property>
    </bean>

    <!-- The Archetype service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService" autowire-candidate="false">
        <!-- don't make this a candidate for autowiring as it doesn't support rules -->
        <constructor-arg ref="archetypeDescriptorCache"/>
        <property name="dao" ref="imObjectDao"/>
        <property name="ruleEngine" ref="ruleEngine"/>
    </bean>

    <!--  The Audit Service -->
    <!--bean id="auditService"
          class="org.openvpms.component.business.service.audit.AuditService">
        <constructor-arg ref="auditDao"/>
    </bean-->

    <!-- ================================================================== -->
    <!--                         ARCHETYPE SUPPORT                          -->
    <!-- ================================================================== -->

    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg ref="archetypeRuleService"/>
    </bean>

    <bean id="archetypeServiceFunctions"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceFunctions">
        <constructor-arg ref="archetypeRuleService"/>
        <constructor-arg ref="lookupService"/>
    </bean>

    <bean id="functionsFactory" class="org.openvpms.web.component.function.DefaultFunctionsFactory">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="lookupService"/>
        <constructor-arg ref="practiceService"/>
        <constructor-arg ref="currencies"/>
        <constructor-arg ref="addressFormatter"/>
        <constructor-arg ref="patientAgeFormatter"/>
        <property name="macros" ref="macros"/>
    </bean>

    <bean id="functions" class="org.apache.commons.jxpath.Functions" factory-bean="functionsFactory"
          factory-method="create"/>

    <!-- The JXPathHelper class, used to register extension functions -->
    <bean id="jxpathHelper" class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg ref="functions"/>
    </bean>

    <!-- ================================================================== -->
    <!--                         CACHE FACTORY                              -->
    <!-- ================================================================== -->
    <bean id="cacheStatisticsService" class="org.ehcache.impl.internal.statistics.DefaultStatisticsService"/>

    <bean id="cacheFactory" class="org.openvpms.component.business.service.cache.ConfigurableEhcacheManager">
        <constructor-arg ref="cacheStatisticsService"/>
        <constructor-arg ref="archetypeRuleService"/>
        <constructor-arg value="party.organisationPractice"/>
    </bean>

    <!-- ================================================================== -->
    <!--                         LOOKUP SERVICE                             -->
    <!-- ================================================================== -->

    <bean id="lookupService"
          class="org.openvpms.component.business.service.lookup.CachingLookupService">
        <plugin:service/>
        <constructor-arg ref="archetypeRuleService"/>
        <constructor-arg ref="imObjectDao"/>
        <constructor-arg ref="cacheFactory"/>
        <property name="cached">
            <list>
                <value>lookup.state</value>
                <value>lookup.suburb</value>
            </list>
        </property>
    </bean>

    <bean id="lookupServiceHelper"
          class="org.openvpms.component.business.service.lookup.LookupServiceHelper">
        <constructor-arg ref="lookupService"/>
    </bean>


    <!-- ================================================================== -->
    <!--                 RULES ENGINE (DROOLS)                              -->
    <!-- ================================================================== -->

    <!-- The local ruleServiceProvider. We can have as many different ruleProviders as we want -->
    <bean id="ruleServiceProvider"
          class="org.springmodules.jsr94.factory.DefaultRuleServiceProviderFactoryBean">
        <property name="provider" value="http://drools.org"/>
        <property name="providerClass"
                  value="org.drools.jsr94.rules.RuleServiceProviderImpl"/>
    </bean>

    <!-- The local ruleRuntime. Usually, there is one ruleRuntime bean for each ruleServiceProvider bean. -->
    <bean id="ruleRuntime"
          class="org.springmodules.jsr94.factory.RuleRuntimeFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the local ruleAdministrator. Usually, there is one ruleAdministrator bean for each ruleServiceProvider bean -->
    <bean id="ruleAdministrator"
          class="org.springmodules.jsr94.factory.RuleAdministratorFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the ruleSource. There can be many ruleSource beans for each ruleAdministrator/ruleRuntime. -->
    <bean id="ruleSource"
          class="org.openvpms.component.business.service.ruleengine.RuleDescriptorRuleSource">
        <property name="ruleRuntime" ref="ruleRuntime"/>
        <property name="ruleAdministrator" ref="ruleAdministrator"/>
    </bean>

    <!--  The Rule engine -->
    <bean id="ruleEngine"
          class="org.openvpms.component.business.service.ruleengine.RuleEngine">
        <constructor-arg ref="ruleSource"/>
    </bean>

    <!-- ================================================================== -->
    <!--                      AUDIT DEFINITIONS                           = -->
    <!-- ================================================================== -->

    <!--  Create a proxy for the ArchetypeService bean -->
    <!--bean id="autoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>auditServiceAdvisor</value>
            </list>
        </property>
    </bean-->

    <!-- The audit service advisor -->
    <!--bean id="auditServiceAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="auditService"/>
        <property name="patterns">
            <list>
                <value>.*ArchetypeService\.save</value>
                <value>.*ArchetypeService\.remove</value>
            </list>
        </property>
    </bean-->

    <!-- ================================================================== -->
    <!-- Scheduling                                                         -->
    <!-- ================================================================== -->

    <bean id="jobScheduler" class="org.openvpms.component.business.service.scheduler.JobScheduler">
        <constructor-arg ref="scheduler"/>
        <constructor-arg ref="archetypeRuleService"/>
    </bean>

    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory">
            <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.plugin.jobHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
            </props>
        </property>
        <property name="waitForJobsToCompleteOnShutdown" value="true"/>
    </bean>


    <!-- ================================================================== -->
    <!--                        PROPER CASING                               -->
    <!-- ================================================================== -->

    <bean id="properCaseConverter"
          class="org.openvpms.component.business.service.archetype.assertion.ProperCaseNameConverter">
        <constructor-arg>
            <bean class="org.openvpms.component.business.service.archetype.assertion.LocaleProperCaseRules">
                <constructor-arg value="localisation.propercase"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="properCaseConverterHelper"
          class="org.openvpms.component.business.service.archetype.assertion.ProperCaseConverterHelper">
        <constructor-arg ref="properCaseConverter"/>
    </bean>


</beans>