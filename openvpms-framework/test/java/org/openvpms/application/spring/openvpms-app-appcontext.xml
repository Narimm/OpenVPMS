<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2014 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <!--  Property configuration -->
    <bean id="props"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>

    <!--  The data source -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${hibernate.connection.driver_class}"/>
        <property name="url" value="${hibernate.connection.url}"/>
        <property name="username" value="${hibernate.connection.username}"/>
        <property name="password" value="${hibernate.connection.password}"/>
    </bean>


    <!--  Hibernate session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
        <property name="mappingResources">
            <list>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/act/ActDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/act/ActRelationshipDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/act/ParticipationDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/archetype/ActionTypeDescriptorDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/archetype/ArchetypeDescriptorDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/archetype/AssertionDescriptorDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/archetype/AssertionTypeDescriptorDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/archetype/NodeDescriptorDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/document/DocumentDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/audit/AuditRecord.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/entity/EntityDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/entity/EntityIdentityDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/entity/EntityRelationshipDOImpl.hbm.xml
                </value>
                <value>org/openvpms/component/business/dao/hibernate/im/entity/EntityLinkDOImpl.hbm.xml</value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/lookup/LookupDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/lookup/LookupRelationshipDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/party/ContactDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/product/ProductPriceDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/security/ArchetypeAuthorityDOImpl.hbm.xml
                </value>
                <value>
                    org/openvpms/component/business/dao/hibernate/im/security/SecurityRoleDOImpl.hbm.xml
                </value>
            </list>
        </property>
    </bean>

    <bean id="txManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
        <property name="transactionManager">
            <ref local="txManager"/>
        </property>
    </bean>

    <!--  The User DAO bean -->
    <bean id="userDAO"
          class="org.openvpms.component.business.dao.hibernate.im.security.UserDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--  The AuditRecord DAO bean -->
    <bean id="auditDao"
          class="org.openvpms.component.business.dao.hibernate.im.audit.AuditDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg index="0" ref="imObjectDao"/>
    </bean>

    <!--  The JXPathHelper class, which allows the user to register JXPath extension functions -->
    <bean id="jxpathHelper"
          class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg index="0">
            <props>
                <prop key="tf">
                    org.openvpms.component.system.service.jxpath.TestFunctions
                </prop>
            </props>
        </constructor-arg>
    </bean>

    <!--  The Archetype Service -->
    <bean id="defaultArchetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService">
        <constructor-arg index="0">
            <ref local="archetypeDescriptorCache"/>
        </constructor-arg>
        <property name="dao">
            <ref local="imObjectDao"/>
        </property>
        <property name="ruleEngine">
            <ref local="ruleEngine"/>
        </property>
    </bean>

    <!--  The rule-based Archetype Service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.rule.ArchetypeRuleService">
        <constructor-arg>
            <ref local="defaultArchetypeService"/>
        </constructor-arg>
        <constructor-arg>
            <ref local="txManager"/>
        </constructor-arg>
        <constructor-arg>
            <ref local="ruleEngine"/>
        </constructor-arg>
    </bean>

    <!--  The Archetype Service Helper so others can reference the service statically -->
    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg index="0">
            <ref local="archetypeService"/>
        </constructor-arg>
    </bean>

    <!--  The Audit Service -->
    <bean id="auditService"
          class="org.openvpms.component.business.service.audit.AuditService">
        <constructor-arg index="0">
            <ref local="auditDao"/>
        </constructor-arg>
    </bean>

    <!--  The User Details Service -->
    <bean id="userDetailsService"
          class="org.openvpms.component.business.service.security.UserService">
        <constructor-arg index="0">
            <ref local="userDAO"/>
        </constructor-arg>
    </bean>

    <!--  Create a proxy for the Sudit Service bean -->
    <bean id="auditServiceProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>auditServiceAdvisor</value>
            </list>
        </property>
    </bean>

    <!-- The audit service advisor -->
    <bean id="auditServiceAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref local="auditService"/>
        </property>
        <property name="patterns">
            <list>
                <value>.*ArchetypeService\.save</value>
                <value>.*ArchetypeService\.remove</value>
            </list>
        </property>
    </bean>

    <!--  Create a proxy for the Security Service bean -->
    <bean id="securityserviceProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>securityAdvisor</value>
            </list>
        </property>
    </bean>

    <!--  Configure the security advisor -->
    <bean id='securityAdvisor'
          class='org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor'>
        <property name='authenticationManager' ref='authenticationManager'/>
        <property name='accessDecisionManager' ref='accessDecisionManager'/>
        <property name="securityMetadataSource">
            <value>
                org.openvpms.component.business.service.archetype.IArchetypeService.save=archetypeService.save
                org.openvpms.component.business.service.archetype.IArchetypeService.remove=archetypeService.remove
            </value>
        </property>
    </bean>

    <!--  Define the Authentication Manager  -->
    <bean id='authenticationManager'
          class='org.springframework.security.authentication.ProviderManager'>
        <property name='providers'>
            <list>
                <ref bean='daoAuthenticationProvider'/>
            </list>
        </property>
    </bean>

    <!--  Define the authentication provider -->
    <bean id='daoAuthenticationProvider'
          class='org.springframework.security.authentication.dao.DaoAuthenticationProvider'>
        <property name="userDetailsService">
            <ref bean="userDetailsService"/>
        </property>
    </bean>

    <!--  Define thew access decision manager for authorization -->
    <bean id='accessDecisionManager'
          class='org.springframework.security.access.vote.AffirmativeBased'>
        <property name='decisionVoters'>
            <list>
                <ref bean='archetypeAwareVoter'/>
            </list>
        </property>
    </bean>

    <!--  Use the standard role vote -->
    <bean id='archetypeAwareVoter'
          class='org.openvpms.component.business.service.security.ArchetypeAwareVoter'/>

    <!-- The `local' ruleServiceProvider; we can have as many different ruleProviders as we want -->
    <bean id="ruleServiceProvider"
          class="org.springmodules.jsr94.factory.DefaultRuleServiceProviderFactoryBean">
        <property name="provider">
            <value>http://drools.org</value>
        </property>
        <property name="providerClass">
            <value>org.drools.jsr94.rules.RuleServiceProviderImpl</value>
        </property>
    </bean>

    <!-- The local ruleRuntime. Usually, there is one ruleRuntime bean for each ruleServiceProvider bean. -->
    <bean id="ruleRuntime"
          class="org.springmodules.jsr94.factory.RuleRuntimeFactoryBean">
        <property name="serviceProvider">
            <ref local="ruleServiceProvider"/>
        </property>
    </bean>

    <!-- the local ruleAdministrator. Usually, there is one ruleAdministrator bean for each ruleServiceProvider bean -->
    <bean id="ruleAdministrator"
          class="org.springmodules.jsr94.factory.RuleAdministratorFactoryBean">
        <property name="serviceProvider">
            <ref local="ruleServiceProvider"/>
        </property>
    </bean>

    <!-- the ruleSource. There can be many ruleSource beans for each ruleAdministrator/ruleRuntime. -->
    <bean id="ruleSource"
          class="org.openvpms.component.business.service.ruleengine.RuleDescriptorRuleSource">
        <property name="ruleRuntime">
            <ref local="ruleRuntime"/>
        </property>
        <property name="ruleAdministrator">
            <ref local="ruleAdministrator"/>
        </property>
    </bean>

    <!--  The DroolsRileEngine interceptor -->
    <bean id="ruleEngine"
          class="org.openvpms.component.business.service.ruleengine.RuleEngine">
        <constructor-arg index="0">
            <ref local="ruleSource"/>
        </constructor-arg>
    </bean>

</beans>
