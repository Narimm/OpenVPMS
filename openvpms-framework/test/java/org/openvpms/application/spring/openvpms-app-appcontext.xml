<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2015 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-4.0.xsd">

    <import resource="classpath:/datasource-context.xml"/>

    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <constructor-arg ref="sessionFactory"/>
    </bean>

    <!--  The User DAO bean -->
    <bean id="userDAO"
          class="org.openvpms.component.business.dao.hibernate.im.security.UserDAOHibernate">
        <constructor-arg ref="sessionFactory"/>
    </bean>

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg index="0" ref="imObjectDao"/>
    </bean>

    <!--  The JXPathHelper class, which allows the user to register JXPath extension functions -->
    <bean id="jxpathHelper"
          class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg index="0">
            <props>
                <prop key="tf">
                    org.openvpms.component.system.service.jxpath.TestFunctions
                </prop>
            </props>
        </constructor-arg>
    </bean>

    <!--  The Archetype Service -->
    <bean id="defaultArchetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService">
        <constructor-arg ref="archetypeDescriptorCache"/>
        <property name="dao" ref="imObjectDao"/>
        <property name="ruleEngine" ref="ruleEngine"/>
    </bean>

    <!--  The rule-based Archetype Service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.rule.ArchetypeRuleService">
        <constructor-arg ref="defaultArchetypeService"/>
        <constructor-arg ref="txnManager"/>
        <constructor-arg ref="ruleEngine"/>
    </bean>

    <!--  The Archetype Service Helper so others can reference the service statically -->
    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg ref="archetypeService"/>
    </bean>

    <!--  The User Details Service -->
    <bean id="userDetailsService"
          class="org.openvpms.component.business.service.security.UserService">
        <constructor-arg ref="userDAO"/>
    </bean>

    <bean id="securityserviceProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>securityAdvisor</value>
            </list>
        </property>
    </bean>

    <!--  Configure the security advisor -->
    <bean id='securityAdvisor'
          class="org.openvpms.component.business.service.security.OpenVPMSMethodSecurityInterceptor">
        <property name='authenticationManager' ref='authenticationManager'/>
        <property name='accessDecisionManager' ref='accessDecisionManager'/>
        <property name="securityMetadataSource" ref="archSecurityMetaDataSource"/>
    </bean>

    <security:method-security-metadata-source id="archSecurityMetaDataSource">
        <security:protect method="org.openvpms.component.business.service.archetype.IArchetypeService.create"
                          access="archetypeService.create"/>
        <security:protect method="org.openvpms.component.business.service.archetype.IArchetypeService.save"
                          access="archetypeService.save"/>
        <security:protect method="org.openvpms.component.business.service.archetype.IArchetypeService.remove"
                          access="archetypeService.remove"/>
    </security:method-security-metadata-source>

    <!--  Define the Authentication Manager  -->
    <bean id='authenticationManager'
          class='org.springframework.security.authentication.ProviderManager'>
        <constructor-arg>
            <list>
                <ref bean='daoAuthenticationProvider'/>
            </list>
        </constructor-arg>
    </bean>

    <!--  Define the authentication provider -->
    <bean id='daoAuthenticationProvider'
          class='org.springframework.security.authentication.dao.DaoAuthenticationProvider'>
        <property name="userDetailsService" ref="userDetailsService"/>
    </bean>

    <!--  Define thew access decision manager for authorization -->
    <bean id='accessDecisionManager'
          class='org.springframework.security.access.vote.AffirmativeBased'>
        <constructor-arg>
            <list>
                <ref bean='archetypeAwareVoter'/>
            </list>
        </constructor-arg>
    </bean>

    <!--  Use the standard role vote -->
    <bean id='archetypeAwareVoter'
          class='org.openvpms.component.business.service.security.ArchetypeAwareVoter'/>

    <!-- The `local' ruleServiceProvider; we can have as many different ruleProviders as we want -->
    <bean id="ruleServiceProvider"
          class="org.springmodules.jsr94.factory.DefaultRuleServiceProviderFactoryBean">
        <property name="provider" value="http://drools.org"/>
        <property name="providerClass" value="org.drools.jsr94.rules.RuleServiceProviderImpl"/>
    </bean>

    <!-- The local ruleRuntime. Usually, there is one ruleRuntime bean for each ruleServiceProvider bean. -->
    <bean id="ruleRuntime"
          class="org.springmodules.jsr94.factory.RuleRuntimeFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the local ruleAdministrator. Usually, there is one ruleAdministrator bean for each ruleServiceProvider bean -->
    <bean id="ruleAdministrator"
          class="org.springmodules.jsr94.factory.RuleAdministratorFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the ruleSource. There can be many ruleSource beans for each ruleAdministrator/ruleRuntime. -->
    <bean id="ruleSource"
          class="org.openvpms.component.business.service.ruleengine.RuleDescriptorRuleSource">
        <property name="ruleRuntime" ref="ruleRuntime"/>
        <property name="ruleAdministrator" ref="ruleAdministrator"/>
    </bean>

    <!--  The DroolsRileEngine interceptor -->
    <bean id="ruleEngine"
          class="org.openvpms.component.business.service.ruleengine.RuleEngine">
        <constructor-arg ref="ruleSource"/>
    </bean>

</beans>
