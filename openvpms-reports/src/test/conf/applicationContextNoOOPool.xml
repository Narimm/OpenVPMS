<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2018 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

        <!-- allow system properties to override any other property source -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!--  The data source -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--  Hibernate session factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.openvpms.component.business.dao.hibernate.cache.WorkaroundJCacheRegionFactory</prop>
                <prop key="hibernate.javax.cache.provider">org.ehcache.jsr107.EhcacheCachingProvider</prop>
                <prop key="hibernate.javax.cache.uri">ehcache.xml</prop>
                <prop key="hibernate.query.factory_class">org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory</prop>
                <prop key="hibernate.show_sql">false</prop>
            </props>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath*:org/openvpms/component/business/dao/**/*.hbm.xml</value>
                <value>classpath*:org/openvpms/archetype/rules/**/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <bean id="txnManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <aop:config proxy-target-class="true"/>
    <tx:annotation-driven transaction-manager="txnManager"/>

    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <constructor-arg ref="sessionFactory"/>
    </bean>

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg index="0" ref="imObjectDao"/>
    </bean>

    <!--  The Archetype Service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService">
        <constructor-arg ref="archetypeDescriptorCache"/>
        <property name="dao" ref="imObjectDao"/>
    </bean>

    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg ref="archetypeService"/>
    </bean>

    <!--  The Lookup Service -->
    <bean id="lookupService" class="org.openvpms.component.business.service.lookup.LookupService">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="imObjectDao"/>
    </bean>

    <bean id="lookupServiceHelper" class="org.openvpms.component.business.service.lookup.LookupServiceHelper">
        <constructor-arg ref="lookupService"/>
    </bean>

    <bean id="currencies" class="org.openvpms.archetype.rules.math.Currencies">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="lookupService"/>
    </bean>

    <bean id="practiceRules" class="org.openvpms.archetype.rules.practice.PracticeRules">
        <constructor-arg ref="currencies"/>
        <constructor-arg ref="archetypeService"/>
    </bean>

    <bean id="patientRules" class="org.openvpms.archetype.rules.patient.PatientRules">
        <constructor-arg ref="practiceRules"/>
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="lookupService"/>
        <constructor-arg>
            <null/>
        </constructor-arg>
    </bean>

    <bean id="functionsFactory" class="org.openvpms.archetype.function.factory.DefaultArchetypeFunctionsFactory">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="lookupService"/>
        <constructor-arg>
            <null/>
        </constructor-arg>
        <constructor-arg ref="currencies"/>
        <constructor-arg>
            <null/>
        </constructor-arg>
    </bean>

    <bean id="functions" class="org.apache.commons.jxpath.Functions" factory-bean="functionsFactory"
          factory-method="create"/>

    <!-- The JXPathHelper class, used to register extension functions -->
    <bean id="jxpathHelper" class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg ref="functions"/>
    </bean>

    <!-- the Document handlers -->
    <bean id="documentHandlers" class="org.openvpms.archetype.rules.doc.DocumentHandlers">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg>
            <list>
                <bean class="org.openvpms.report.jasper.JRXMLDocumentHandler">
                    <constructor-arg ref="archetypeService"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>


    <!-- OpenOffice bootstrap service. Starts an instance of OpenOffice on
         the local host listening on a socket.
         This is equivalent to running:
            soffice -nologo -nodefault -norestore -nolockcheck -accept=socket,port=8100;urp;
    -->
    <bean id="OOSocketBootstrapService"
          class="org.openvpms.report.openoffice.OOSocketBootstrapService">
        <constructor-arg index="0" value="8100"/>
        <!-- start the service on demand -->
        <constructor-arg index="1" value="false"/>
    </bean>

    <!-- OpenOffice bootstrap service. Starts an instance of OpenOffice on
         the local host listening on a pipe.
         This is equivalent to running:
            soffice -nologo -nodefault -norestore -nolockcheck -accept=pipe,name=vpms;urp;
    -->
    <!--bean id="OOPipeBootstrapService"
          class="org.openvpms.report.openoffice.OOPipeBootstrapService">
        <constructor-arg value="vpms"/>
    </bean-->

</beans>
