<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2014 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

        <!-- allow system properties to override any other property source -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!--  The data source -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--  Hibernate session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.c3p0.min_size">5</prop>
                <prop key="hibernate.c3p0.max_size">20</prop>
                <prop key="hibernate.c3p0.timeout">1800</prop>
                <prop key="hibernate.c3p0.max_statements">50</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.SingletonEhCacheProvider</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
            </props>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath*:org/openvpms/component/business/dao/**/*.hbm.xml</value>
                <value>classpath*:org/openvpms/archetype/rules/**/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <bean id="txnManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <constructor-arg ref="sessionFactory"/>
        <property name="transactionManager">
            <ref local="txnManager"/>
        </property>
    </bean>

    <!--  The AuditRecord DAO bean -->
    <bean id="auditDao"
          class="org.openvpms.component.business.dao.hibernate.im.audit.AuditDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg index="0" ref="imObjectDao"/>
    </bean>

    <!--  The Archetype Service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService">
        <constructor-arg index="0">
            <ref local="archetypeDescriptorCache"/>
        </constructor-arg>
        <property name="dao">
            <ref local="imObjectDao"/>
        </property>
    </bean>

    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg index="0">
            <ref local="archetypeService"/>
        </constructor-arg>
    </bean>

    <!--  The Lookup Service -->
    <bean id="lookupService" class="org.openvpms.component.business.service.lookup.LookupService">
        <constructor-arg index="0">
            <ref local="archetypeService"/>
        </constructor-arg>
        <constructor-arg index="1">
            <ref local="imObjectDao"/>
        </constructor-arg>
    </bean>

    <bean id="lookupServiceHelper" class="org.openvpms.component.business.service.lookup.LookupServiceHelper">
        <constructor-arg>
            <ref local="lookupService"/>
        </constructor-arg>
    </bean>

    <bean id="patientRules" class="org.openvpms.archetype.rules.patient.PatientRules">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="lookupService"/>
        <constructor-arg>
            <null/>
        </constructor-arg>
    </bean>

    <!-- The JXPathHelper class, used to register extension functions -->
    <bean id="jxpathHelper"
          class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg>
            <map>
                <entry key="openvpms"
                       value="org.openvpms.component.business.service.archetype.ArchetypeServiceFunctions"/>
                <entry key="date" value="org.openvpms.component.system.common.jxpath.DateFunctions"/>
                <entry key="lookup" value="org.openvpms.archetype.function.lookup.LookupFunctions"/>
                <entry key="party">
                    <bean class="org.openvpms.archetype.function.party.PartyFunctions">
                        <constructor-arg index="0" ref="archetypeService"/>
                        <constructor-arg index="1" ref="patientRules"/>
                        <constructor-arg index="2">
                            <null/>
                        </constructor-arg>
                    </bean>
                </entry>
            </map>
        </constructor-arg>
    </bean>

    <!-- the Document handlers -->
    <bean id="documentHandlers"
          class="org.openvpms.archetype.rules.doc.DocumentHandlers">
        <property name="documentHandlers">
            <list>
                <bean class="org.openvpms.report.jasper.JRXMLDocumentHandler">
                    <constructor-arg ref="archetypeService"/>
                </bean>
            </list>
        </property>
    </bean>


    <!-- OpenOffice bootstrap service. Starts an instance of OpenOffice on
         the local host listening on a socket.
         This is equivalent to running:
            soffice -nologo -nodefault -norestore -nolockcheck -accept=socket,port=8100;urp;
    -->
    <bean id="OOSocketBootstrapService"
          class="org.openvpms.report.openoffice.OOSocketBootstrapService">
        <constructor-arg index="0" value="8100"/>
        <!-- start the service on demand -->
        <constructor-arg index="1" value="false"/>
    </bean>

    <!-- OpenOffice bootstrap service. Starts an instance of OpenOffice on
         the local host listening on a pipe.
         This is equivalent to running:
            soffice -nologo -nodefault -norestore -nolockcheck -accept=pipe,name=vpms;urp;
    -->
    <bean id="OOPipeBootstrapService"
          class="org.openvpms.report.openoffice.OOPipeBootstrapService">
        <constructor-arg value="vpms"/>
    </bean>

</beans>
