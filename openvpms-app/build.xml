<!--
     General purpose build script for web applications
     
     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web applicaiton.

        context              Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.

     $Id: build.xml,v 1.2 2005/04/18 09:04:23 andyman232323 Exp $
-->

<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="openvpms" default="compile" basedir=".">

<!-- ===================== Property Definitions =========================== -->
<!--
  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.
-->

  <property file="${user.home}/build.properties"/>
  <property file="build.properties"/>

<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  catalina.home        The directory in which you have installed
                       a binary distribution of Tomcat 4.  This will
                       be used by the "deploy" target.

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

  manager.password     The login password of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

  manager.url          The URL of the "/manager" web application on the
                       Tomcat installation to which we will deploy web
                       applications and web services.

  manager.username     The login username of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

-->


<property name="build.home" value="${basedir}/build"/>
<property name="dist.home" value="${basedir}/dist"/>
<property name="docs.home" value="${basedir}/docs"/>
<property name="javadoc.home" value="${docs.home}/api"/>
<property name="src.home" value="${basedir}/src"/>
<property name="class.home" value="${build.home}/WEB-INF/classes"/>
<property name="context.home" value="${basedir}/context"/>

<property name="lib.home" value="${basedir}/context/WEB-INF/lib"/>
<property name="devlib.home" value="${basedir}/devlib"/>
<property name="web.home" value="${basedir}/context"/>

	
<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.
-->

  <path id="compile.classpath">
    
  	<!-- own classes, of course -->
  	<pathelement location="${class.home}"/>
  	
  	<fileset dir="${lib.home}">
      <include name="*.jar"/>
    </fileset> 

  	<!--path refid="tomcat.classpath"/-->
    
  	<!-- it's a web application in the end... -->
  	<pathelement location="${devlib.home}/servlet-api.jar"/>
  </path>

  
<path id="generation.classpath">
    <fileset dir="${devlib.home}/">
      <include name="*.jar"/>
    </fileset>

    <path refid="compile.classpath"/>
</path>
	
	
<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>



<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 4
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar"
           value="/path/to/foo.jar"/>
-->


	
<!-- ==================== Prepare Target   ================================ -->
  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
  	<mkdir  dir="${build.home}/WEB-INF/lib"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>
  	<mkdir  dir="${javadoc.home}"/>
  	<mkdir  dir="${dist.home}"/>

    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    
  </target>
  
  
  
  
<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  	<delete dir="${javadoc.home}"/>
  </target>



<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    
    <javac srcdir="${src.home}"
          destdir="${class.home}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
    	 target="1.4"
    	 source="1.4">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources, but no sources -->
    <copy  todir="${class.home}">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>
  	
  	


  </target>






	
<!-- ==================== War Target ===================================== -->


<!--

  The war target creates a deployable war archive

-->

<target name="war" depends="clean,compile"
   description="Create war archive">

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}.war"
         basedir="${build.home}"/>

</target>




	
		

	
	


	
		
<!-- ==================== echo Target =================================== -->	
<target name="echo"	
	description="Output some vars...">

	<echo message="ant.file  = ${ant.file}"/>
    <echo message="ant.version  = ${ant.version}"/>
    <echo message="ant.java.version  = ${ant.java.version}"/>
	<echo message="app.name = ${app.name}" />
	<echo message="app.version = ${app.version}" />
	<echo message="basedir = ${basedir}" />
	<echo message="src.home = ${src.home}" />
	<echo message="build.home = ${build.home}" />
	<echo message="dist.home = ${dist.home}" />
	<echo message="docs.home = ${docs.home}" />
	<echo message="web.home = ${web.home}" />
	<echo message="catalina.home = ${catalina.home}" />
	<echo message="manager.url = ${manager.url}" />
	<echo message="manager.username = ${manager.username}" />
	<echo message="manager.app.path = ${manager.app.path}" />

	
</target>
	


	
<!-- ==================== automatic generation related=================== -->	

	

<!-- ==================== all automatic targets =========================== -->	
<target name="generate" depends="generate.javadoc"
    description="Runs all auto-generation tools"/>	
	
	
<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->
	
<target name="generate.javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir dir="${javadoc.home}"/>
    <javadoc sourcepath="${src.home}"
                destdir="${javadoc.home}"
           packagenames="*">
      <classpath refid="compile.classpath"/>
    </javadoc>

</target>	
	
<!-- ==================== Hibernate-Tools ============== ===================== -->	

<!-- generating java files from hbm mappings -->
<!--  
      !!! CAUTION !!!
      - overwrites java files, if they already exist
 -->
<!--
<target name="generate.hbm2java"
	description="Generate Java source files from the HBM mapping files">
	
	<hbm2java output="${src.home}">
        <fileset dir="${src.home}/itoskop/bo">
        	<include name="**/*.hbm.xml"/>
        </fileset>
	</hbm2java>	
</target>
-->	

<!-- create a schema from the Java class files -->	
<!--  
      !!! CAUTION !!!
      - overwrites schema, if already exists.
-->
<!--
<target name="generate.ddl" depends="compile"
	description="Create a database creation script (SQL) from Hibernate mapping files">
    <taskdef name="schemaexport"
        classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
        classpathref="generation.classpath"/>
-->
<!--
	quiet			don't output the script to stdout
	drop			only drop the tables
	text			don't export to the database
	output=file 	output the ddl script to a file
	config=hibernate.cfg.xml	read Hibernate configuration from an XML file
	properties=hibernate.properties	read database properties from a file
	format	format the generated SQL nicely in the script
	delimiter=x	set an end of line delimiter for the script
 -->
 <!--
	<schemaexport
        config="${class.home}/hibernate.cfg.xml"
        quiet="no"
        text="yes"
        drop="no"
        delimiter=";"
        output="${basedir}/ddl/generated-ddl.sql">
         <fileset dir="${class.home}">
            <include name="**/*.hbm.xml"/>
        </fileset> 
    </schemaexport>
</target>
-->
	
<!-- Define the hibernatedoclet task -->
<!--
	<taskdef name="hibernatedoclet"
                classname="xdoclet.modules.hibernate.HibernateDocletTask">
                <classpath>
                  <fileset dir="${xdoclet.lib.home}/">
                      <include name="*.jar"/>
                  </fileset>
                </classpath>
            </taskdef>

<target name="generate.hibernatedoclet"	depends="compile"
	description="generate the Hibernate mapping files">

	<hibernatedoclet
	    destdir="${hibernate.generated.home}"
	    excludedtags="@version,@author,@todo,@param,@return"
	    force="${hibernate.generated.forced}"
	    verbose="${hibernate.generated.verbose}">

	    <fileset dir="${src.home}/itoskop/">
	        <include name="**/bo/*.java"/>
	    </fileset>

	    <hibernate version="2.0"/>

	</hibernatedoclet>
	
</target>
	
-->	

	<!-- ==================== Install Target ================================== -->

	<!--

	  The "install" target tells the specified Tomcat 4 installation to dynamically
	  install this web application and make it available for execution.  It does
	  *not* cause the existence of this web application to be remembered across
	  Tomcat restarts; if you restart the server, you will need to re-install all
	  this web application.

	  If you have already installed this application, and simply want Tomcat to
	  recognize that you have updated Java classes (or the web.xml file), use the
	  "reload" target instead.

	  NOTE:  This target will only succeed if it is run from the same server that
	  Tomcat is running on.

	  NOTE:  This is the logical opposite of the "remove" target.


	PROBLEM: overrides my custom configuration of datasources???

	-->

	  <target name="install" depends="compile"
	   description="Install application to servlet container">

	    <install url="${manager.url}"
	        username="${manager.username}"
	        password="${manager.password}"
	            path="${manager.app.path}"
	             war="file://${build.home}"/>

	  </target>

	<!-- ====================== List Target =================================== -->

	<!--

	  The "list" target asks the specified Tomcat 4 installation to list the
	  currently running web applications, either loaded at startup time or
	  installed dynamically.  It is useful to determine whether or not the
	  application you are currently developing has been installed.

	-->

	  <target name="list"
	   description="List installed applications on servlet container">

	    <list    url="${manager.url}"
	        username="${manager.username}"
	        password="${manager.password}"/>

	  </target>


	<!-- ==================== Prepare Target ================================== -->

	<!--

	  The "prepare" target is used to create the "build" destination directory,
	  and copy the static contents of your web application to it.  If you need
	  to copy static files from external dependencies, you can customize the
	  contents of this task.

	  Normally, this task is executed indirectly when needed.

	-->




	<!-- ==================== Reload Target =================================== -->

	<!--

	  The "reload" target tells the specified Tomcat 4 installation to dynamically
	  reload this web application, to reflect changes in the underlying classes or
	  the "web.xml" deployment descriptor.

	-->

	  <target name="reload" depends=""
	   description="Reload application on servlet container">

	    <reload url="${manager.url}"
	       username="${manager.username}"
	       password="${manager.password}"
	           path="${manager.app.path}"/>
	    
	  </target>


	<!-- ==================== Remove Target =================================== -->

	<!--

	  The "remove" target tells the specified Tomcat 4 installation to dynamically
	  remove this web application from service.

	  NOTE:  This is the logical opposite of the "install" target.

	-->

	  <target name="remove"
	   description="Remove application on servlet container">

	    <remove url="${manager.url}"
	       username="${manager.username}"
	       password="${manager.password}"
	           path="${manager.app.path}"/>

	  </target>


	
	
	
	
	
</project>
