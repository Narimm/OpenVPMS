<?xml version="1.0"?>
<!--
  #  Version: 1.0
  #
  #  The contents of this file are subject to the OpenVPMS License Version
  #  1.0 (the 'License'); you may not use this file except in compliance with
  #  the License. You may obtain a copy of the License at
  #  http://www.openvpms.org/license/
  #
  #  Software distributed under the License is distributed on an 'AS IS' basis,
  #  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  #  for the specific language governing rights and limitations under the
  #  License.
  #
  #  Copyright 2006 (C) OpenVPMS Ltd. All Rights Reserved.
  #
  #  $Id$
-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>


    <query name="act.customerAppointment">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
	   	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as p
      where act.archetypeId.shortName = 'act.customerAppointment'
            and p.archetypeId.shortName = 'participation.schedule'
            and act.linkId = p.act.linkId
            and p.entity.linkId = :scheduleId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to)))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-incomplete">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
      	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as p
      where act.archetypeId.shortName = 'act.customerAppointment'
            and p.archetypeId.shortName = 'participation.schedule'
            and act.linkId = p.act.linkId
            and p.entity.linkId = :scheduleId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
            and not (act.status = 'COMPLETED' or act.status='CANCELLED'))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-complete">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
      	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as p
      where act.archetypeId.shortName = 'act.customerAppointment'
            and p.archetypeId.shortName = 'participation.schedule'
            and act.linkId = p.act.linkId
            and p.entity.linkId = :scheduleId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
            and (act.status = 'COMPLETED' or act.status='CANCELLED'))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-clinician">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
      	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as pschedule,
           org.openvpms.component.business.domain.im.common.Participation as pclinician
      where act.archetypeId.shortName = 'act.customerAppointment'
            and pschedule.archetypeId.shortName = 'participation.schedule'
            and act.linkId = pschedule.act.linkId
            and pschedule.entity.linkId = :scheduleId
            and pclinician.archetypeId.shortName = 'participation.clinician'
            and act.linkId = pclinician.act.linkId
            and pclinician.entity.linkId = :clinicianId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to)))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-clinician-incomplete">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
      	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as pschedule,
           org.openvpms.component.business.domain.im.common.Participation as pclinician
      where act.archetypeId.shortName = 'act.customerAppointment'
            and pschedule.archetypeId.shortName = 'participation.schedule'
            and act.linkId = pschedule.act.linkId
            and pschedule.entity.linkId = :scheduleId
            and pclinician.archetypeId.shortName = 'participation.clinician'
            and act.linkId = pclinician.act.linkId
            and pclinician.entity.linkId = :clinicianId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
            and not (act.status = 'COMPLETED' or act.status='CANCELLED'))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-clinician-complete">
        <![CDATA[
select p.act,
      act.activityStartTime,
      act.activityEndTime,
      indices(details), elements(details),
      act.status,
      act.reason,
      act.description,
      p.entity,
      e.name
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.common.Entity as e
left outer join act.details as details
where p.act.linkId = act.linkId
      and p.entity.linkId = e.linkId
      and act.archetypeId.shortName = 'act.customerAppointment'
      and ((act.activityStartTime < :from and act.activityEndTime > :from)
      	or (act.activityStartTime < :to and act.activityEndTime > :to)
      	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
      and act.linkId in (
            select distinct act.linkId
            from org.openvpms.component.business.domain.im.act.Act as act,
           org.openvpms.component.business.domain.im.common.Participation as pschedule,
           org.openvpms.component.business.domain.im.common.Participation as pclinician
      where act.archetypeId.shortName = 'act.customerAppointment'
            and pschedule.archetypeId.shortName = 'participation.schedule'
            and act.linkId = pschedule.act.linkId
            and pschedule.entity.linkId = :scheduleId
            and pclinician.archetypeId.shortName = 'participation.clinician'
            and act.linkId = pclinician.act.linkId
            and pclinician.entity.linkId = :clinicianId
            and ((act.activityStartTime < :from and act.activityEndTime > :from)
            	or (act.activityStartTime < :to and act.activityEndTime > :to)
            	or (act.activityStartTime >= :from and act.activityEndTime <=:to))
            and (act.status = 'COMPLETED' or act.status='CANCELLED'))
order by act.activityStartTime, act.linkId
      ]]>
    </query>

    <query name="act.customerAppointment-overlap">
        <![CDATA[
select act.uid
from  org.openvpms.component.business.domain.im.act.Act as act,
      org.openvpms.component.business.domain.im.common.Participation as p
where act.archetypeId.shortName = 'act.customerAppointment'
      and act.uid <> :actId
      and act.linkId = p.act.linkId
      and p.entity.linkId = :scheduleId
      and p.act.archetypeId.shortName = 'act.customerAppointment'
      and act.active = 1
      and ((act.activityStartTime < :startTime and act.activityEndTime > :startTime)
           or (act.activityStartTime < :endTime and  act.activityEndTime > :endTime)
           or (act.activityStartTime >= :startTime and act.activityEndTime <= :endTime))
      ]]>
    </query>

</hibernate-mapping>