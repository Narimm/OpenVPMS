<?xml version='1.0'?>

<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2014 (C) OpenVPMS Ltd. All Rights Reserved.
  -->

<!DOCTYPE hibernate-mapping PUBLIC
        '-//Hibernate/Hibernate Mapping DTD 3.0//EN'
        'http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd'>
<hibernate-mapping>

    <sql-query name="getStockToOrderByStockLocationAndSupplier" cache-mode="ignore">
        <return-scalar column="productId" type="long"/>
        <return-scalar column="productShortName" type="string"/>
        <return-scalar column="productLinkId" type="string"/>
        <return-scalar column="quantity" type="big_decimal"/>
        <return-scalar column="idealQty" type="big_decimal"/>
        <return-scalar column="criticalQty" type="big_decimal"/>
        <return-scalar column="packageSize" type="int"/>
        <return-scalar column="packageUnits" type="string"/>
        <return-scalar column="reorderCode" type="string"/>
        <return-scalar column="reorderDesc" type="string"/>
        <return-scalar column="nettPrice" type="big_decimal"/>
        <return-scalar column="listPrice" type="big_decimal"/>
        <return-scalar column="orderedQty" type="big_decimal"/>
        <return-scalar column="receivedQty" type="big_decimal"/>
        <return-scalar column="cancelledQty" type="big_decimal"/>
        <return-scalar column="orderPackageSize" type="int"/>
        <![CDATA[
        select  product.entity_id as productId,
                product.arch_short_name as productShortName,
                product.linkId as productLinkId,
                quantity.value as quantity,
                idealQty.value as idealQty,
                criticalQty.value as criticalQty,
                packageSize.value as packageSize,
                packageUnits.value as packageUnits,
                reorderCode.value as reorderCode,
                reorderDesc.value as reorderDesc,
                nettPrice.value as nettPrice,
                listPrice.value as listPrice,
                o.orderedQty as orderedQty,
                o.receivedQty as receivedQty,
                o.cancelledQty as cancelledQty,
                o.orderPackageSize as orderPackageSize
        from    entities product
        join    entity_relationships productStock on product.entity_id = productStock.source_id
                    and productStock.arch_short_name = "entityRelationship.productStockLocation"
                    and productStock.target_id = :stockLocationId
        join    entity_relationships productSupplier on product.entity_id = productSupplier.source_id
                    and productSupplier.arch_short_name = "entityRelationship.productSupplier"
                    and productSupplier.target_id = :supplierId
        left outer join entity_relationship_details supplier
                    on supplier.entity_relationship_id = productStock.entity_relationship_id
                    and supplier.name = "supplier"
        left outer join entity_relationship_details preferred
                    on preferred.entity_relationship_id = productSupplier.entity_relationship_id
                    and preferred.name = "preferred"
        left outer join entity_relationship_details quantity
                    on quantity.entity_relationship_id = productStock.entity_relationship_id
                    and quantity.name = "quantity"
        left outer join entity_relationship_details idealQty
                    on idealQty.entity_relationship_id = productStock.entity_relationship_id
                    and idealQty.name = "idealQty"
        left outer join entity_relationship_details criticalQty
                    on criticalQty.entity_relationship_id = productStock.entity_relationship_id
                    and criticalQty.name = "criticalQty"
        left outer join entity_relationship_details packageSize
                    on packageSize.entity_relationship_id = productSupplier.entity_relationship_id
                    and packageSize.name = "packageSize"
        left outer join entity_relationship_details packageUnits
                    on packageUnits.entity_relationship_id = productSupplier.entity_relationship_id
                    and packageUnits.name = "packageUnits"
        left outer join entity_relationship_details reorderCode
                    on reorderCode.entity_relationship_id = productSupplier.entity_relationship_id
                    and reorderCode.name = "reorderCode"
        left outer join entity_relationship_details reorderDesc
                    on reorderDesc.entity_relationship_id = productSupplier.entity_relationship_id
                    and reorderDesc.name = "reorderDescription"
        left outer join entity_relationship_details nettPrice
                    on nettPrice.entity_relationship_id = productSupplier.entity_relationship_id
                    and nettPrice.name = "nettPrice"
        left outer join entity_relationship_details listPrice
                    on listPrice.entity_relationship_id = productSupplier.entity_relationship_id
                    and listPrice.name = "listPrice"
        left join (
            select  productParticipation.entity_id as product_id,
                    stockParticipation.entity_id as stock_id,
                    sum(forderItem.quantity) as orderedQty,
                    sum(receivedQty.value) as receivedQty,
                    sum(cancelledQty.value) as cancelledQty,
                    orderPackageSize.value as orderPackageSize
            from    participations productParticipation
            join    acts orderItem
                        on orderItem.act_id = productParticipation.act_id
                        and orderItem.arch_short_name = "act.supplierOrderItem"
            join    act_relationships orderLink
                        on orderLink.target_id = orderItem.act_id
                    and orderLink.arch_short_name = "actRelationship.supplierOrderItem"
            join    acts orders
                        on orders.act_id = orderLink.source_id
                        and orders.arch_short_name = "act.supplierOrder"
                        and orders.status <> "CANCELLED"
            join    financial_acts forderItem on forderItem.financial_act_id = orderItem.act_id
            join    participations stockParticipation
                        on stockParticipation.act_id = orders.act_id
                        and stockParticipation.arch_short_name = "participation.stockLocation"
            join    act_details receivedQty
                        on receivedQty.act_id = orderItem.act_id
                        and receivedQty.name ="receivedQuantity"
            join    act_details cancelledQty
                        on cancelledQty.act_id = orderItem.act_id
                        and cancelledQty.name ="cancelledQuantity"
            join    act_details orderPackageSize
                        on orderPackageSize.act_id = orderItem.act_id
                        and orderPackageSize.name = "packageSize"
            join    act_details deliveryStatus
                        on deliveryStatus.act_id = orderLink.source_id
                        and deliveryStatus.name ="deliveryStatus"
            where   productParticipation.arch_short_name = "participation.stock"
                        and productParticipation.act_arch_short_name = "act.supplierOrderItem"
                        and deliveryStatus.value <> "FULL"
            group by product_id) as o
                    on o.product_id = product.entity_id
                    and o.stock_id = productStock.target_id
where   product.active = 1
                and convert(idealQty.value, decimal) <> 0.0
                and (convert(quantity.value, decimal) < convert(idealQty.value, decimal))
                and (supplier.value = :supplier or (supplier.value is null and preferred.value = "true"))
        ]]>
    </sql-query>

</hibernate-mapping>