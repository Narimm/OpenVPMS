<?xml version="1.0"?>
<!--
  #  Version: 1.0
  #
  #  The contents of this file are subject to the OpenVPMS License Version
  #  1.0 (the 'License'); you may not use this file except in compliance with
  #  the License. You may obtain a copy of the License at
  #  http://www.openvpms.org/license/
  #
  #  Software distributed under the License is distributed on an 'AS IS' basis,
  #  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  #  for the specific language governing rights and limitations under the
  #  License.
  #
  #  Copyright 2007 (C) OpenVPMS Ltd. All Rights Reserved.
  #
  #  $Id$
-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

    <query name="getBalances">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForCustomersFrom">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForCustomersBetween">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from and e.name <= :to
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountType">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountTypeAndCustomerFrom">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountTypeAndCustomerBetween">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from and e.name <= :to
order by e.name, a.activityStartTime
      ]]>
    </query>

</hibernate-mapping>