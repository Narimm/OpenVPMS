<?xml version="1.0"?>
<!--
  ~ Version: 1.0
  ~
  ~ The contents of this file are subject to the OpenVPMS License Version
  ~ 1.0 (the 'License'); you may not use this file except in compliance with
  ~ the License. You may obtain a copy of the License at
  ~ http://www.openvpms.org/license/
  ~
  ~ Software distributed under the License is distributed on an 'AS IS' basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  ~ for the specific language governing rights and limitations under the
  ~ License.
  ~
  ~ Copyright 2014 (C) OpenVPMS Ltd. All Rights Reserved.
  -->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

    <!--
      Returns all debits for :customer that were overdue as of :overdueDate
      and were not fully paid for by :date.
      The returned columns are:
      id                    - the act id
      total                 - the total amount
      allocatedTotal        - the total amount allocated (paid for)
      allocatedAmount       - the amount paid for by a credit
      overdueAllocationTime - the time an allocatedAmount was made if made after
                              :date
      -->
    <sql-query name="getOverdueAmounts" cache-mode="ignore">
        <return-scalar column="id" type="long"/>
        <return-scalar column="total" type="big_decimal"/>
        <return-scalar column="allocatedTotal" type="big_decimal"/>
        <return-scalar column="allocatedAmount" type="big_decimal"/>
        <return-scalar column="overdueAllocationTime" type="date"/>
        <![CDATA[
select f.financial_act_id as id,
       f.total as total,
       f.allocated_amount as allocatedTotal,
       d.value as allocatedAmount,
       alloc.activity_start_time as overdueAllocationTime
from financial_acts f join acts a on f.financial_act_id = a.act_id
        and a.status = "POSTED" and f.credit = 0
        and (a.arch_short_name = "act.customerAccountChargesInvoice"
        or a.arch_short_name = "act.customerAccountChargesCounter"
        or a.arch_short_name = "act.customerAccountDebitAdjust"
        or a.arch_short_name = "act.customerAccountRefund"
        or a.arch_short_name = "act.customerAccountInitialBalance")
        and a.activity_start_time < :overdueDate
     join participations p on a.act_id = p.act_id and p.arch_short_name = "participation.customer"
     join entities e on e.entity_id = p.entity_id and e.entity_id = :customer
     left join act_relationships r on r.source_id = a.act_id
        and r.arch_short_name = "actRelationship.customerAccountAllocation"
     left join acts alloc on alloc.act_id = r.target_id
        and alloc.activity_start_time > :date
     left join act_relationship_details d on r.act_relationship_id = d.act_relationship_id and d.name = "allocatedAmount"
where f.allocated_amount < f.total or alloc.act_id is not null
group by f.financial_act_id
      ]]>
    </sql-query>

</hibernate-mapping>