<?xml version="1.0"?>
<!--
  #  Version: 1.0
  #
  #  The contents of this file are subject to the OpenVPMS License Version
  #  1.0 (the 'License'); you may not use this file except in compliance with
  #  the License. You may obtain a copy of the License at
  #  http://www.openvpms.org/license/
  #
  #  Software distributed under the License is distributed on an 'AS IS' basis,
  #  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  #  for the specific language governing rights and limitations under the
  #  License.
  #
  #  Copyright 2007 (C) OpenVPMS Ltd. All Rights Reserved.
  #
  #  $Id$
-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

    <query name="getBalances">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForCustomersFrom">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForCustomersBetween">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from and e.name <= :to
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountType">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountTypeAndCustomerFrom">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <query name="getBalancesForAccountTypeAndCustomerBetween">
        <![CDATA[
select e.name, p.entity, p.act, a.activityStartTime, a.status, a.total, a.allocatedAmount, a.credit, c.code
from  org.openvpms.component.business.domain.im.common.Participation as p,
      org.openvpms.component.business.domain.im.act.FinancialAct as a,
      org.openvpms.component.business.domain.im.party.Party as e
left outer join e.classifications c with c.archetypeId.shortName='lookup.customerAccountType'
where a.linkId = p.act.linkId
      and p.entity.linkId = e.linkId
      and p.archetypeId.shortName='participation.customerAccountBalance'
      and c.linkId = :accountType
      and (a.status = 'POSTED' or a.status='COMPLETED')
      and e.name >= :from and e.name <= :to
      and a.activityStartTime <= :startTime
order by e.name, a.activityStartTime
      ]]>
    </query>

    <!--
      Returns all debits for :customer that were overdue as of :overdueDate
      and were not fully paid for by :date.
      The returned columns are:
      id                    - the act id
      total                 - the total amount
      allocatedTotal        - the total amount allocated (paid for)
      allocatedAmount       - the amount paid for by a credit
      overdueAllocationTime - the time an allocatedAmount was made if made after
                              :date
      -->
    <sql-query name="getOverdueAmounts" cache-mode="ignore">
      <return-scalar column="id" type="long"/>
      <return-scalar column="total" type="big_decimal"/>
      <return-scalar column="allocatedTotal" type="big_decimal"/>
      <return-scalar column="allocatedAmount" type="big_decimal"/>
      <return-scalar column="overdueAllocationTime" type="date"/>
        <![CDATA[
select f.financial_act_id as id,
       f.total as total,
       f.allocated_amount as allocatedTotal,
       d.value as allocatedAmount,
       alloc.activity_start_time as overdueAllocationTime
from financial_acts f join acts a on f.financial_act_id = a.act_id
        and a.status = "POSTED" and f.credit = 0
        and (a.arch_short_name = "act.customerAccountChargesInvoice"
        or a.arch_short_name = "act.customerAccountChargesCounter"
        or a.arch_short_name = "act.customerAccountDebitAdjust"
        or a.arch_short_name = "act.customerAccountRefund"
        or a.arch_short_name = "act.customerAccountInitialBalance")
        and a.activity_start_time < :overdueDate
     join participations p on a.linkId = p.act_linkId and p.arch_short_name = "participation.customer"
     join entities e on e.linkId = p.entity_linkId and e.linkId = :customer
     left join act_relationships r on r.source_linkId = a.linkId
        and r.arch_short_name = "actRelationship.customerAccountAllocation"
     left join acts alloc on alloc.linkId = r.target_linkId
        and alloc.activity_start_time > :date
     left join act_relationship_details d on r.act_relationship_id = d.act_relationship_id and d.name = "allocatedAmount"
where f.allocated_amount < f.total or alloc.act_id is not null
group by f.financial_act_id
      ]]>
    </sql-query>

</hibernate-mapping>