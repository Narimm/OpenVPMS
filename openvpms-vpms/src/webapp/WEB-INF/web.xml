<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
      PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
      "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

    <!-- display name, used by JMX management consoles  et al. -->
    <display-name>OpenVpms</display-name>
    
    <description>
       <![CDATA[
           The OpenVPMS test Application 
        ]]>
    </description>


	<!--  the location of the Springframework application context
	      configuration file(s), applied by ContextLoaderListener    
	      /WEB-INF/applicationContext-security.xml
	      -->
    <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/application-context-business.xml
		</param-value>
	</context-param>

    <!-- logging framework, used by the container and by the deployed application  -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.properties</param-value>
	</context-param>

    <!-- mapping the / request to the Tapestry HomeService (homepage)  -->
    <filter>
        <filter-name>redirect</filter-name>
        <filter-class>org.apache.tapestry.RedirectFilter</filter-class>
    </filter>


    <!-- mapping / request to the Tapestry HomeService (homepage)  
         see the filter defined above  -->
    <filter-mapping>
        <filter-name>redirect</filter-name>
        <url-pattern>/</url-pattern>
    </filter-mapping>
    
    <!-- Loads the root application context of this web app at startup.
	     The application context will then be available via 
	     WebApplicationContextUtils.getWebApplicationContext(servletContext).
    -->
   	<listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  	</listener>


    <!--  The HttpSessionEventPublisher will publish HttpSessionCreatedEvent 
          and HttpSessionDestroyedEvent to the WebApplicationContext.
          No idea so far, what this could be good for  -->  
    <!-- listener>
        <listener-class>net.sf.acegisecurity.ui.session.HttpSessionEventPublisher</listener-class>
    </listener-->

    <!-- make the Springframework use logging, too  -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

    <!-- the Tapestry application servlet  -->
    <servlet>
        <servlet-name>openvpms</servlet-name>
        <servlet-class>org.apache.tapestry.ApplicationServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>


    <!-- define a URL mapping for the Tapestry servlet -->
    <servlet-mapping>
        <servlet-name>openvpms</servlet-name>
        <url-pattern>/app</url-pattern>
    </servlet-mapping>


</web-app>
