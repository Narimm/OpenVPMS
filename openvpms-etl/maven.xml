<project default="jar:jar"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:j="jelly:core"
         xmlns:velocity="jelly:velocity"
         xmlns:castor="castor">

    <!-- ==================================================================== -->
    <!-- Generates java sources using castor                                  -->
    <!-- ==================================================================== -->
    <goal name="generate-castor-srcs">
        <attainGoal name="castor:prepare-filesystem"/>
        <castor:generate schema="${basedir}/src/schema/mapping.xsd"
                         package="org.openvpms.etl.load"
                         types="j2"/>
    </goal>

    <!-- ==================================================================== -->
    <!-- Generates sources prior to compilation                               -->
    <!-- ==================================================================== -->
    <preGoal name="java:compile">
        <attainGoal name="generate-castor-srcs"/>
    </preGoal>

    <preGoal name="test:test">
        <attainGoal name="generate-hibernate-properties"/>
        <copy todir="${maven.test.dest}" file="${maven.hibernate.properties}"/>
        <attainGoal name="generate-appcontext"/>
        <copy todir="${maven.test.dest}"
              file="${maven.build.dir}/applicationContext.xml"/>
    </preGoal>

    <preGoal name="hibernate:schema-export">
        <attainGoal name="java:compile"/>
        <attainGoal name="java:jar-resources"/>
        <attainGoal name="generate-hibernate-properties"/>
    </preGoal>

    <preGoal name="hibernate:schema-update">
        <attainGoal name="java:compile"/>
        <attainGoal name="java:jar-resources"/>
        <attainGoal name="generate-hibernate-properties"/>
    </preGoal>

    <goal name="generate-hibernate-properties">
        <copy tofile="${maven.hibernate.properties}"
              file="src/conf/hibernate/hibernate.properties">
            <filterset>
                <filter token="HIBERNATE_DIALECT" value="${hibernate.dialect}"/>
                <filter token="JDBC_DRIVER"
                        value="${hibernate.connection.driver_class}"/>
                <filter token="JDBC_URL" value="${hibernate.connection.url}"/>
                <filter token="JDBC_USERNAME"
                        value="${hibernate.connection.username}"/>
                <filter token="JDBC_PASSWORD"
                        value="${hibernate.connection.password}"/>
            </filterset>
        </copy>
    </goal>

    <goal name="pluginlib">
        <velocity:merge name="${maven.build.dir}/plugin.xml"
                        basedir="${basedir}/src/conf/kettle"
                        template="plugin.xml"
                        inputEncoding="${maven.docs.outputencoding}"
                        outputEncoding="${maven.docs.outputencoding}"/>
        <delete file="${basedir}/velocity.log" failonerror="false"/>
    </goal>

    <goal name="deploykettle">
        <attainGoal name="jar"/>
        <attainGoal name="pluginlib"/>
        <ant:copy file="${maven.build.dir}/plugin.xml"
                  tofile="${kettle.plugin.dir}/plugin.xml"/>
        <ant:copy file="${basedir}/src/conf/kettle/plugin.png"
                  todir="${kettle.plugin.dir}"/>
        <ant:copy file="${maven.build.dir}/${maven.final.name}.jar"
                  todir="${kettle.plugin.dir}"/>
        <j:forEach var="lib" items="${pom.artifacts}">
            <j:set var="dep" value="${lib.dependency}"/>
            <j:if test="${dep.getProperty('kettle.plugin')=='true'}">
                <j:if test="${dep.type =='jar'}">
                    <ant:copy todir="${kettle.plugin.dir}" file="${lib.path}"/>
                </j:if>
            </j:if>
        </j:forEach>
    </goal>

    <goal name="generate-appcontext">
        <copy tofile="${maven.build.dir}/applicationContext.xml"
              file="src/conf/spring/applicationContext.xml">
            <filterset>
                <filter token="HIBERNATE_DIALECT" value="${hibernate.dialect}"/>
                <filter token="JDBC_DRIVER"
                        value="${hibernate.connection.driver_class}"/>
                <filter token="JDBC_URL" value="${hibernate.connection.url}"/>
                <filter token="JDBC_USERNAME"
                        value="${hibernate.connection.username}"/>
                <filter token="JDBC_PASSWORD"
                        value="${hibernate.connection.password}"/>
            </filterset>
        </copy>
    </goal>

</project>
