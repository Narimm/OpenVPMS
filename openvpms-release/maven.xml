<project default="openvpms:dist"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:deploy="deploy"
         xmlns:artifact="artifact"
         xmlns:j="jelly:core">

    <goal name="openvpms:dist-deploy" prereqs="openvpms:dist">
        <artifact:deploy
          artifact="${maven.dist.dir}/${maven.final.name}.zip"
          type="zip"
          project="${pom}"
        />
    </goal>

    <goal name="openvpms:dist" prereqs="openvpms:dist-prepare-bin-filesystem">
        <zip zipfile="${maven.dist.dir}/${maven.final.name}.zip">
            <zipfileset dir="${maven.dist.bin.archive.dir}"/>
        </zip>
    </goal>

    <goal name="openvpms:dist-prepare-bin-filesystem"
          prereqs="dist:build-setup, openvpms:createdb">
        <!--

        This is the directory where everything is copied to so that it can
        be archived.

        -->

        <ant:delete dir="${maven.dist.bin.assembly.dir}"/>
        <ant:mkdir dir="${maven.dist.bin.assembly.dir}"/>

        <j:set var="distDir" value="${maven.dist.bin.assembly.dir}"/>

        <!-- copy scripts -->
        <mkdir dir="${distDir}/bin"/>
        <copy todir="${distDir}/bin">
            <fileset dir="${basedir}/src/bin"/>
        </copy>

        <!-- Ensure scripts, batch files have appropriate end-of-line chars -->
        <fixcrlf srcDir="${distDir}" eol="lf">
            <include name="**/*.sh"/>
        </fixcrlf>

        <fixcrlf srcDir="${distDir}" eol="crlf">
            <include name="**/*.bat"/>
        </fixcrlf>

        <!-- copy the dependencies, exluding mysql as it is GPL'ed -->
        <deploy:copy-deps todir="${distDir}/lib"
                          excludes="mysql-connector-java"/>

        <!-- move the webapp -->
        <mkdir dir="${distDir}/webapps"/>
        <move file="${distDir}/lib/openvpms-${pom.currentVersion}.war"
              tofile="${distDir}/webapps/openvpms.war"/>

        <!-- copy the configuration files -->
        <mkdir dir="${distDir}/conf"/>
        <copy todir="${distDir}/conf"
              file="${maven.hibernate.properties}"/>
        <copy todir="${distDir}/conf"
              file="${basedir}/src/conf/log4j/log4j.properties"/>
        <copy todir="${distDir}/conf"
              file="${basedir}/src/conf/spring/applicationContext.xml"/>

        <!--  copy the report templates -->
        <mkdir dir="${distDir}/reports"/>
        <copy todir="${distDir}/reports">
            <fileset dir="${basedir}/src/reports"/>
        </copy>

        <!-- copy the import data -->
        <mkdir dir="${distDir}/import/data"/>
        <copy todir="${distDir}/import/data">
            <fileset dir="${basedir}/src/import/data"/>
        </copy>

        <!-- rename the kettle plugin -->
        <mkdir dir="${distDir}/import/plugin"/>
        <move file="${distDir}/lib/openvpms-etl-plugin-${pom.currentVersion}.zip"
              tofile="${distDir}/import/plugin/OpenVPMSLoader.zip"/>

        <!-- copy the database scripts -->
        <mkdir dir="${distDir}/db"/>
        <copy todir="${distDir}/db" file="${basedir}/src/db/createdb.sql"/>
        <copy todir="${distDir}/db" file="${maven.build.dir}/db/db.sql"/>

        <!-- copy the update scripts etc -->
        <mkdir dir="${distDir}/update"/>
        <copy todir="${distDir}/update">
            <fileset dir="${basedir}/src/update"/>
        </copy>

        <!-- copy the archetypes -->
        <mkdir dir="${distDir}/update/archetypes"/>
        <copy todir="${distDir}/update/archetypes">
            <fileset dir="${maven.build.dir}/archetypes"/>
        </copy>

        <!-- copy the readme and license -->
        <copy todir="${distDir}">
            <fileset dir="${basedir}/src/doc"/>
            <fileset dir="${basedir}">
                <include name="License.txt"/>
            </fileset>
            <filterset begintoken="${'${'}" endtoken="}">
                <filter token="pom.version" value="${pom.currentVersion}"/>
            </filterset>
        </copy>

        <!-- copy the images -->
        <mkdir dir="${distDir}/images"/>
        <copy todir="${distDir}/images">
            <fileset dir="${basedir}/src/images"/>
        </copy>

    </goal>

    <goal name="openvpms:createdb">
        <attainGoal name="openvpms:initdb"/>
        <attainGoal name="hibernate:schema-export"/>
        <attainGoal name="archetype:load"/>
        <attainGoal name="report:load"/>
        <attainGoal name="openvpms:dumpdb"/>
    </goal>

    <!-- ================================================================== -->
    <!-- Archetype targets                                                  -->
    <!-- ================================================================== -->
    <goal name="archetype:load"
          description="Load the Archetypes from a directory">
        <attainGoal name="extract-archetype-files"/>
        <ant:java
                classname="org.openvpms.tools.archetype.loader.ArchetypeLoader"
                failonerror="true"
                fork="true">
            <ant:classpath>
                <ant:pathelement path="${basedir}/src/conf/log4j"/>
                <ant:pathelement path="${maven.build.dest}"/>
                <ant:pathelement path="${maven.build.dir}/hibernate"/>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
            <arg line="${openvpms.archetype.loader.cmdline}"/>
        </ant:java>
    </goal>

    <goal name="extract-archetype-files">
        <mkdir dir="${maven.build.dir}/archetypes"/>
        <delete>
            <fileset dir="${maven.build.dir}/archetypes" includes="**/*.adl"/>
        </delete>

        <j:set var="repo" value="${context.getVariable('maven.repo.local')}"/>
        <j:set var="dependencyId" value="org.openvpms:openvpms-archetypes"/>
        <j:set var="artifactPath"
               value="${pom.getDependencyPath(dependencyId)}"/>
        <j:set var="artifactRepoPath" value="${repo}/${artifactPath}"/>

        <unzip src="${artifactPath}" dest="${maven.build.dir}/archetypes">
            <patternset>
                <include name="**/*.adl"/>
                <include name="**/*.xml"/>
            </patternset>
        </unzip>
    </goal>

    <goal name="data:loadbase" description="Load the base data">
        <ant:java
                classname="org.openvpms.tools.data.loader.StaxArchetypeDataLoader"
                failonerror="true"
                maxmemory="512m"
                fork="true">
            <ant:classpath>
                <ant:pathelement path="${basedir}/src/conf/log4j"/>
                <ant:pathelement path="${maven.build.dest}"/>
                <ant:pathelement path="${maven.build.dir}/hibernate"/>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
            <arg line="-c src/conf/spring/applicationContext.xml -s -b 1000 -f src/import/data/base.xml"/>
        </ant:java>
    </goal>

    <!-- ================================================================== -->
    <!-- Report loading                                                     -->
    <!-- ================================================================== -->
    <goal name="report:load" description="Load the reports from a directory">
        <ant:java classname="org.openvpms.report.tools.TemplateLoader"
                  failonerror="true"
                  fork="true">
            <ant:classpath>
                <ant:pathelement path="${basedir}/src/conf/log4j"/>
                <ant:pathelement path="${maven.build.dir}/hibernate"/>
                <ant:pathelement path="${basedir}/src/conf/spring"/>
                <ant:pathelement path="${maven.build.dest}"/>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
            <arg line="${openvpms.report.loader.cmdline}"/>
        </ant:java>
    </goal>

    <!-- ================================================================== -->
    <!-- Schema targets                                                     -->
    <!-- ================================================================== -->
    <goal name="openvpms:initdb">
        <input message="All data is going to be deleted from ${openvpms.db.admin.url}openvpms. Continue? "
               validargs="y,n" addproperty="do.delete"/>
        <condition property="do.abort">
           <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Build aborted by user.</fail>

        <sql driver="${jdbc.driverClassName}"
             url="${openvpms.db.admin.url}"
             userid="${openvpms.db.admin.username}"
             password="${openvpms.db.admin.password}">
           <ant:classpath>
               <ant:path refid="maven.dependency.classpath"/>
           </ant:classpath>
           drop database if exists `openvpms';
           commit;
        </sql>
        <sql driver="${jdbc.driverClassName}"
             url="${openvpms.db.admin.url}"
             userid="${openvpms.db.admin.username}"
             password="${openvpms.db.admin.password}"
             src="${basedir}/src/db/createdb.sql">
            <ant:classpath>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
        </sql>
    </goal>

    <goal name="openvpms:dumpdb">
        <mkdir dir="${maven.build.dir}/db"/>
        <exec executable="mysqldump" output="${maven.build.dir}/db/db.sql"
              failOnError="true" logError="true">
            <arg line="${openvpms.db.name} -u ${openvpms.db.user} --password=${openvpms.db.password}"/>
        </exec>
    </goal>

    <preGoal name="hibernate:schema-export">
        <attainGoal name="generate-hibernate-properties"/>
        <attainGoal name="extract-mapping-files"/>
    </preGoal>

    <goal name="generate-hibernate-properties">
        <copy tofile="${maven.hibernate.properties}"
              file="src/conf/hibernate/hibernate.properties">
           <filterset begintoken="${'${'}" endtoken="}">
                <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
                <filter token="jdbc.driverClassName" value="${jdbc.driverClassName}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
                <filter token="jdbc.username" value="${jdbc.username}"/>
                <filter token="jdbc.password" value="${jdbc.password}"/>
            </filterset>
        </copy>
    </goal>

    <goal name="extract-mapping-files">
        <delete>
            <fileset dir="${maven.build.dir}/hibernate"
                     includes="**/*.hbm.xml"/>
        </delete>

        <j:set var="repo" value="${context.getVariable('maven.repo.local')}"/>
        <j:set var="dependencyId" value="org.openvpms:openvpms-framework"/>
        <j:set var="artifactPath"
               value="${pom.getDependencyPath(dependencyId)}"/>
        <j:set var="artifactRepoPath" value="${repo}/${artifactPath}"/>

        <unzip src="${artifactPath}" dest="${maven.hibernate.input.dir}">
            <patternset>
                <include name="**/*.hbm.xml"/>
            </patternset>
        </unzip>

        <j:set var="dependencyId" value="org.openvpms:openvpms-etl"/>
        <j:set var="artifactPath"
               value="${pom.getDependencyPath(dependencyId)}"/>
        <j:set var="artifactRepoPath" value="${repo}/${artifactPath}"/>

        <unzip src="${artifactPath}" dest="${maven.hibernate.input.dir}">
            <patternset>
                <include name="**/*.hbm.xml"/>
            </patternset>
        </unzip>

    </goal>

</project>