<project default="openvpms:dist"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:deploy="deploy"
         xmlns:j="jelly:core">

    <goal name="openvpms:dist" prereqs="openvpms:dist-prepare-bin-filesystem">
        <zip zipfile="${maven.dist.dir}/${maven.final.name}.zip">
          <zipfileset dir="${maven.dist.bin.archive.dir}"/>
        </zip>
    </goal>

    <goal name="openvpms:dist-prepare-bin-filesystem" 
          prereqs="dist:build-setup,generate-hibernate-properties">
        <!--

        This is the directory where everything is copied to so that it can
        be archived.

        -->

        <ant:delete dir="${maven.dist.bin.assembly.dir}"/>
        <ant:mkdir dir="${maven.dist.bin.assembly.dir}"/>

        <j:set var="distDir" value="${maven.dist.bin.assembly.dir}"/>

        <!-- copy scripts -->
        <mkdir dir="${distDir}/bin"/>
        <copy todir="${distDir}/bin">
          <fileset dir="${basedir}/src/bin"/>
        </copy>

        <!-- copy the dependencies -->
        <deploy:copy-deps todir="${distDir}/lib"/>

        <!-- copy the configuration files -->
        <mkdir dir="${distDir}/conf"/>
        <copy todir="${distDir}/conf"
              file="${maven.hibernate.properties}"/>
        <copy todir="${distDir}/conf"
              file="${basedir}/src/conf/log4j/log4j.properties"/>
        <copy todir="${distDir}/conf"
              file="${basedir}/src/conf/spring/applicationContext.xml"/>

        <!-- Ensure scripts, batch files have appropriate end-of-line chars -->
        <fixcrlf srcDir="${distDir}" eol="lf">
          <include name="**/*.sh"/>
        </fixcrlf>

        <fixcrlf srcDir="${distDir}" eol="crlf">
          <include name="**/*.bat"/>
        </fixcrlf>
    </goal>

    <goal name="generate-hibernate-properties">
        <copy tofile="${maven.hibernate.properties}"
              file="src/conf/hibernate/hibernate.properties">
            <filterset>
                <filter token="HIBERNATE_DIALECT" value="${hibernate.dialect}"/>
                <filter token="JDBC_DRIVER"
                        value="${hibernate.connection.driver_class}"/>
                <filter token="JDBC_URL" value="${hibernate.connection.url}"/>
                <filter token="JDBC_USERNAME"
                        value="${hibernate.connection.username}"/>
                <filter token="JDBC_PASSWORD"
                        value="${hibernate.connection.password}"/>
            </filterset>
        </copy>
    </goal>

</project>